\title{Obtaining State Weather Station Data}
\author{Marc Los Huertos}
\date{\today~(ver. 0.8)} 

\documentclass{article}

\title{Guide 2: Cleaning and Pre-Processing Weather Station Data}
\author{Marc Los Huertos}
\date{\today~(ver. 0.4)} 

\begin{document}
\maketitle

\section{Introduction}

\subsection{Goals}

The goal of this guide is to provide a step-by-step process for cleaning and pre-processing weather station data. The data is from the Global Historical Climatology Network (GHCN) Daily dataset. The data is available from the National Oceanic and Atmospheric Administration (NOAA) and is available from the National Centers for Environmental Information (NCEI) at %\url{https://www.ncdc.noaa.gov/data-access/land-based-station-data/land-based-datasets/global-historical-climatology-network-ghcn}.

\subsection{Background}

What is GHCN-Daily?Links to an external site.


\subsection{Approach}

We need to address several things that might get in the way of our analysis: 

\begin{enumerate}
  \item missing data
  \item date format (convert to POSIXct, adding month and year as varibles)
  \item units
  \item outliers
  \item Other stuff??
\end{enumerate}


\section{Cleaning and Pre-Processing Functions}

\subsection{Starting the Process}

Before you begin, make sure you have the stations read into R. You can do this by running the following code:

<<>>=
ls()
@

You should see station1\ldots stationN, where N is the number of stations you have read in.

If the data are not in the R environment, you can read them in using the following but you have the uncompressed files, you can read them in using the following function:

<<show_ReadStation.fun, echo=FALSE>>=
print(ReadStation.fun)
@

Example of how to use the function

<<echo=TRUE, results='hide'>>=
datafolder = "04_Regional_Climate_Trends/Data/SP24"
ReadStation.fun(station1)
@

Using str(), make sure the data sets look right!

<<setup, echo=FALSE, results='hide', message=FALSE>>=
library(here)
source(here("04_Regional_Climate_Trends", "Guides", "Guide2.R"))
@


\subsection{Clean Data}

\begin{description}

\item[Function to Fix Dates]

<<show_fixdates.fun, echo=FALSE>>=
print(fixdates.fun)
@

Example of how to use the function

<<echo=TRUE, results='hide'>>=
fixdates.fun(station1)
@

\item[Evaluation Data Coverage]

We need to know how much data we have for each station. This is important for the next steps in the process.

<<show_datacoverage.fun, echo=FALSE>>=
print(coverage.fun)
@


Example of how to use the function

<<echo=TRUE, results='hide'>>=
coverage.fun(station1)
@

\item[Function to Convert Units]

\item[Function to Create Monthly Values]

For TMAX and TMIN, we want monthly means, for rainfall, we'll want monthly totals.\footnote{Brody/Evyln: We need code to exclue months with missing data, these might not be represenative of the month if missing, especically for PRCP!}

Here's the function: j

<<echo=FALSE>>=
print(monthlyvalues.fun)
@

Example of how to use the function:

<<echo=TRUE, results='hide'>>=
monthlyvalues.fun(station1)
@

\item[Function to Create Anomalies]






First, I tested each line on station1. I will then create a function to clean the data and apply it to each station.

<<eval=FALSE>>=
# station1$VALUE = station1$VALUE/10  # Correct Values Units
# Fix Date format
station1$Ymd = as.Date(as.character(station1$DATE), format = "%Y%m%d") 
str(station1)

station1$MONTH = as.numeric(format(station1$Ymd, "%m"))
station1$YEAR = as.numeric(format(station1$Ymd, "%Y"))
station1.monthly = aggregate(VALUE ~ MONTH + YEAR, 
                   data = subset(station1, ELEMENT == "TMAX"), mean)

# create baseline (normals) dataset
station1.normals = subset(station1, 
                           Ymd >= "1961-01-01" & Ymd <= "1990-12-31") 
station1.normals.monthly = aggregate(VALUE ~ MONTH, 
                   data = subset(station1.normals, ELEMENT == "TMAX"), mean)
names(station1.normals.monthly) <- c("MONTH", "NORMALS")

station1.anomaly = merge(station1.monthly, 
                         station1.normals.monthly, by = "MONTH")
station1.anomaly$ANOMALY = 
  station1.anomaly$VALUE - station1.anomaly$NORMALS

@


\end{description}


\section{Code for QA/QC and Preparing for our Analyses}


Function is probably sensitive to missing values, need to work on that!

<<cleandataframe.fun, echo=TRUE, eval=FALSE>>=
x=station1
cleandataframe.fun <- function(x){
  #x$VALUE = x$VALUE/10
  x$Ymd = as.Date(as.character(x$DATE), format = "%Y%m%d")
  x$MONTH = as.numeric(format(x$Ymd, "%m"))
  x$YEAR = as.numeric(format(x$Ymd, "%Y"))

  x.TMAX.monthly = aggregate(VALUE ~ MONTH + YEAR, 
            data = subset(x, ELEMENT == "TMAX"), mean)
  names(x.TMAX.monthly) <- c("MONTH", "YEAR", "TMAX")
  x.TMIN.monthly = aggregate(VALUE ~ MONTH + YEAR, 
            data = subset(x, ELEMENT == "TMIN"), mean)
  names(x.TMIN.monthly) <- c("MONTH", "YEAR", "TMIN")
  x.PRCP.monthly = aggregate(VALUE ~ MONTH + YEAR, 
            data = subset(x, ELEMENT == "PRCP"), sum)
  names(x.PRCP.monthly) <- c("MONTH", "YEAR", "PRCP")
  
  x.normals = subset(x, Ymd >= "1961-01-01" & Ymd <= "1990-12-31")  
  x.TMAX.normals.monthly = aggregate(VALUE ~ MONTH, 
            data = subset(x.normals, ELEMENT == "TMAX"), mean)
  names(x.TMAX.normals.monthly) <- c("MONTH", "NORMALS")
  x.TMIN.normals.monthly = aggregate(VALUE ~ MONTH, 
            data = subset(x.normals, ELEMENT == "TMIN"), mean)
  names(x.TMIN.normals.monthly) <- c("MONTH", "NORMALS")
  x.PRCP.normals.monthly = aggregate(VALUE ~ MONTH, 
            data = subset(x.normals, ELEMENT == "PRCP"), sum)
  names(x.PRCP.normals.monthly) <- c("MONTH", "NORMALS")
  
  
  x.TMAX.anomaly = merge(x.TMAX.monthly, x.TMAX.normals.monthly, by = "MONTH")
  x.TMAX.anomaly$TMAX.anomaly = x.TMAX.anomaly$TMAX - x.TMAX.anomaly$NORMALS
  
  x.TMIN.anomaly = merge(x.TMIN.monthly, x.TMIN.normals.monthly, by = "MONTH")
  x.TMIN.anomaly$TMIN.anomaly = x.TMIN.anomaly$TMIN - x.TMIN.anomaly$NORMALS
  
  x.PRCP.anomaly = merge(x.PRCP.monthly, x.PRCP.normals.monthly, by = "MONTH")
  x.PRCP.anomaly$PRCP.anomaly = x.PRCP.anomaly$PRCP - x.PRCP.anomaly$NORMALS
  
  TEMP <- merge(x.TMAX.anomaly, x.TMIN.anomaly, by = c("MONTH", "YEAR") )
  x.anomaly <- merge(TEMP, x.PRCP.anomaly, by = c("MONTH", "YEAR"))[,c(1:3, 5:6, 8:9, 11)]
  library(lubridate)
  #x.anomaly$Ym1 = as.Date(paste(x.anomaly$YEAR, x.anomaly$MONTH), format="%Y %m")
  x.anomaly$Ym1 =  lubridate::myd(paste(x.anomaly$MONTH, x.anomaly$YEAR, "1"))
  str(x.anomaly)
  return(x.anomaly)
}
@

\subsection{Apply Function to All Stations}

So far, I have only run function for 1 station, but I suspect you can figure out how to run it for each one!

<<eval=FALSE>>=
station1.clean= cleandataframe.fun(station1)
@

\subsection{Plot Anomaly}

Graphic has lots of issues. more next time!  But here's a start.

<<eval=FALSE>>=
options(scipen=5)
par(mar=c(4,6,2,5))

plot(ANOMALY ~ YEAR, data = subset(station1.TMAX, MONTH == 1), 
     las=1, pch=19, col = "blue", cex=.5, #xlab = "Year", 
     ylab = "Maximum Temp Anomaly (C)",
     main="January Maximum Temp Anomaly")
mtext("Maximum Temp Anomaly (C)", side = 2, line = 3)
temp.lm = lm(ANOMALY ~ YEAR, data = subset(station1.TMAX, MONTH == 1))
abline(coef(temp.lm), col = "red")

@

\section{QA/QC}

\subsection{Missing Data}

<<eval=FALSE>>=
# determine percent missing in station1
station1.TMAX.coverage = sum(!is.na(station1$VALUE[station1$ELEMENT=="TMAX"]))/length(station1$VALUE[station1$ELEMENT=="TMAX"])*100

# function to determine percent missing
coverage.fun <- function(station, element){
  Dates.all = data.frame(Ymd=seq.Date(from=min(station$Ymd), to=max(station$Ymd), by="day"))
  station.full = merge(Dates.all, station, all = TRUE)
  station.coverage = sum(!is.na(station.full$VALUE[station.full$ELEMENT==element]))/
    length(station.full$VALUE[station.full$ELEMENT==element])*100
  return(round(station.coverage,2))
}

coverage.data(station1, "TMAX")
coverage.data(station2, "TMAX")

Date.full = data.frame(Ymd=seq.Date(from=min(station1$Ymd), to=max(station1$Ymd), by="day"))
str(Date.full)

station1.full = merge(Date.full, station1, all = TRUE)
coverage.fun(station1, "TMAX")
coverage.fun(station2, "TMAX")


@
\section{Next Steps}

This is all we need to do so far. Next week, we'll look at different way to visualize the data! 

I'll save all the station data into csv files, then use them in the next guide to clean, process, and visualize data.

<<eval=FALSE>>=
write.csv(station1, file = paste0(here::here("04_Regional_Climate_Trends", "Data", "SP24", "station1.csv")), row.names = FALSE)
write.csv(station2, file = paste0(here::here("04_Regional_Climate_Trends", "Data", "SP24", "station2.csv")), row.names = FALSE)
write.csv(station3, file = paste0(here::here("04_Regional_Climate_Trends", "Data", "SP24", "station3.csv")), row.names = FALSE)
write.csv(station4, file = paste0(here::here("04_Regional_Climate_Trends", "Data", "SP24", "station4.csv")), row.names = FALSE)
write.csv(station5, file = paste0(here::here("04_Regional_Climate_Trends", "Data", "SP24", "station5.csv")), row.names = FALSE)
@



\end{document}
